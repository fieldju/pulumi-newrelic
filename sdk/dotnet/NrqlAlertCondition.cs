// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.NewRelic
{
    public partial class NrqlAlertCondition : Pulumi.CustomResource
    {
        /// <summary>
        /// The New Relic account ID for managing your NRQL alert conditions.
        /// </summary>
        [Output("accountId")]
        public Output<int?> AccountId { get; private set; } = null!;

        /// <summary>
        /// The baseline direction of a baseline NRQL alert condition. Valid values are: 'LOWER_ONLY', 'UPPER_AND_LOWER',
        /// 'UPPER_ONLY' (case insensitive).
        /// </summary>
        [Output("baselineDirection")]
        public Output<string?> BaselineDirection { get; private set; } = null!;

        /// <summary>
        /// A condition term with priority set to critical.
        /// </summary>
        [Output("critical")]
        public Output<Outputs.NrqlAlertConditionCritical?> Critical { get; private set; } = null!;

        /// <summary>
        /// The description of the NRQL alert condition.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether or not to enable the alert condition.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Number of expected groups when using outlier detection.
        /// </summary>
        [Output("expectedGroups")]
        public Output<int?> ExpectedGroups { get; private set; } = null!;

        /// <summary>
        /// Whether to look for a convergence of groups when using outlier detection.
        /// </summary>
        [Output("ignoreOverlap")]
        public Output<bool?> IgnoreOverlap { get; private set; } = null!;

        /// <summary>
        /// The title of the condition.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A NRQL query.
        /// </summary>
        [Output("nrql")]
        public Output<Outputs.NrqlAlertConditionNrql> Nrql { get; private set; } = null!;

        /// <summary>
        /// Whether overlapping groups should produce a violation.
        /// </summary>
        [Output("openViolationOnGroupOverlap")]
        public Output<bool?> OpenViolationOnGroupOverlap { get; private set; } = null!;

        /// <summary>
        /// The ID of the policy where this condition should be used.
        /// </summary>
        [Output("policyId")]
        public Output<int> PolicyId { get; private set; } = null!;

        /// <summary>
        /// Runbook URL to display in notifications.
        /// </summary>
        [Output("runbookUrl")]
        public Output<string?> RunbookUrl { get; private set; } = null!;

        /// <summary>
        /// A set of terms for this condition. Max 2 terms allowed - at least one 1 critical term and 1 optional warning term.
        /// </summary>
        [Output("terms")]
        public Output<ImmutableArray<Outputs.NrqlAlertConditionTerm>> Terms { get; private set; } = null!;

        /// <summary>
        /// The type of NRQL alert condition to create. Valid values are: 'static', 'outlier', 'baseline'.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// Valid values are: 'single_value' or 'sum'
        /// </summary>
        [Output("valueFunction")]
        public Output<string?> ValueFunction { get; private set; } = null!;

        /// <summary>
        /// Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you
        /// select. Possible values are 'ONE_HOUR', 'TWO_HOURS', 'FOUR_HOURS', 'EIGHT_HOURS', 'TWELVE_HOURS', 'TWENTY_FOUR_HOURS'
        /// (case insensitive).
        /// </summary>
        [Output("violationTimeLimit")]
        public Output<string?> ViolationTimeLimit { get; private set; } = null!;

        /// <summary>
        /// Sets a time limit, in seconds, that will automatically force-close a long-lasting violation after the time limit you
        /// select. Possible values are 3600, 7200, 14400, 28800, 43200, and 86400.
        /// </summary>
        [Output("violationTimeLimitSeconds")]
        public Output<int?> ViolationTimeLimitSeconds { get; private set; } = null!;

        /// <summary>
        /// A condition term with priority set to warning.
        /// </summary>
        [Output("warning")]
        public Output<Outputs.NrqlAlertConditionWarning?> Warning { get; private set; } = null!;


        /// <summary>
        /// Create a NrqlAlertCondition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NrqlAlertCondition(string name, NrqlAlertConditionArgs args, CustomResourceOptions? options = null)
            : base("newrelic:index/nrqlAlertCondition:NrqlAlertCondition", name, args ?? new NrqlAlertConditionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NrqlAlertCondition(string name, Input<string> id, NrqlAlertConditionState? state = null, CustomResourceOptions? options = null)
            : base("newrelic:index/nrqlAlertCondition:NrqlAlertCondition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NrqlAlertCondition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NrqlAlertCondition Get(string name, Input<string> id, NrqlAlertConditionState? state = null, CustomResourceOptions? options = null)
        {
            return new NrqlAlertCondition(name, id, state, options);
        }
    }

    public sealed class NrqlAlertConditionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The New Relic account ID for managing your NRQL alert conditions.
        /// </summary>
        [Input("accountId")]
        public Input<int>? AccountId { get; set; }

        /// <summary>
        /// The baseline direction of a baseline NRQL alert condition. Valid values are: 'LOWER_ONLY', 'UPPER_AND_LOWER',
        /// 'UPPER_ONLY' (case insensitive).
        /// </summary>
        [Input("baselineDirection")]
        public Input<string>? BaselineDirection { get; set; }

        /// <summary>
        /// A condition term with priority set to critical.
        /// </summary>
        [Input("critical")]
        public Input<Inputs.NrqlAlertConditionCriticalArgs>? Critical { get; set; }

        /// <summary>
        /// The description of the NRQL alert condition.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether or not to enable the alert condition.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Number of expected groups when using outlier detection.
        /// </summary>
        [Input("expectedGroups")]
        public Input<int>? ExpectedGroups { get; set; }

        /// <summary>
        /// Whether to look for a convergence of groups when using outlier detection.
        /// </summary>
        [Input("ignoreOverlap")]
        public Input<bool>? IgnoreOverlap { get; set; }

        /// <summary>
        /// The title of the condition.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A NRQL query.
        /// </summary>
        [Input("nrql", required: true)]
        public Input<Inputs.NrqlAlertConditionNrqlArgs> Nrql { get; set; } = null!;

        /// <summary>
        /// Whether overlapping groups should produce a violation.
        /// </summary>
        [Input("openViolationOnGroupOverlap")]
        public Input<bool>? OpenViolationOnGroupOverlap { get; set; }

        /// <summary>
        /// The ID of the policy where this condition should be used.
        /// </summary>
        [Input("policyId", required: true)]
        public Input<int> PolicyId { get; set; } = null!;

        /// <summary>
        /// Runbook URL to display in notifications.
        /// </summary>
        [Input("runbookUrl")]
        public Input<string>? RunbookUrl { get; set; }

        [Input("terms")]
        private InputList<Inputs.NrqlAlertConditionTermArgs>? _terms;

        /// <summary>
        /// A set of terms for this condition. Max 2 terms allowed - at least one 1 critical term and 1 optional warning term.
        /// </summary>
        [Obsolete(@"use `critical` and `warning` attributes instead")]
        public InputList<Inputs.NrqlAlertConditionTermArgs> Terms
        {
            get => _terms ?? (_terms = new InputList<Inputs.NrqlAlertConditionTermArgs>());
            set => _terms = value;
        }

        /// <summary>
        /// The type of NRQL alert condition to create. Valid values are: 'static', 'outlier', 'baseline'.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Valid values are: 'single_value' or 'sum'
        /// </summary>
        [Input("valueFunction")]
        public Input<string>? ValueFunction { get; set; }

        /// <summary>
        /// Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you
        /// select. Possible values are 'ONE_HOUR', 'TWO_HOURS', 'FOUR_HOURS', 'EIGHT_HOURS', 'TWELVE_HOURS', 'TWENTY_FOUR_HOURS'
        /// (case insensitive).
        /// </summary>
        [Input("violationTimeLimit")]
        public Input<string>? ViolationTimeLimit { get; set; }

        /// <summary>
        /// Sets a time limit, in seconds, that will automatically force-close a long-lasting violation after the time limit you
        /// select. Possible values are 3600, 7200, 14400, 28800, 43200, and 86400.
        /// </summary>
        [Input("violationTimeLimitSeconds")]
        public Input<int>? ViolationTimeLimitSeconds { get; set; }

        /// <summary>
        /// A condition term with priority set to warning.
        /// </summary>
        [Input("warning")]
        public Input<Inputs.NrqlAlertConditionWarningArgs>? Warning { get; set; }

        public NrqlAlertConditionArgs()
        {
        }
    }

    public sealed class NrqlAlertConditionState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The New Relic account ID for managing your NRQL alert conditions.
        /// </summary>
        [Input("accountId")]
        public Input<int>? AccountId { get; set; }

        /// <summary>
        /// The baseline direction of a baseline NRQL alert condition. Valid values are: 'LOWER_ONLY', 'UPPER_AND_LOWER',
        /// 'UPPER_ONLY' (case insensitive).
        /// </summary>
        [Input("baselineDirection")]
        public Input<string>? BaselineDirection { get; set; }

        /// <summary>
        /// A condition term with priority set to critical.
        /// </summary>
        [Input("critical")]
        public Input<Inputs.NrqlAlertConditionCriticalGetArgs>? Critical { get; set; }

        /// <summary>
        /// The description of the NRQL alert condition.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether or not to enable the alert condition.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Number of expected groups when using outlier detection.
        /// </summary>
        [Input("expectedGroups")]
        public Input<int>? ExpectedGroups { get; set; }

        /// <summary>
        /// Whether to look for a convergence of groups when using outlier detection.
        /// </summary>
        [Input("ignoreOverlap")]
        public Input<bool>? IgnoreOverlap { get; set; }

        /// <summary>
        /// The title of the condition.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A NRQL query.
        /// </summary>
        [Input("nrql")]
        public Input<Inputs.NrqlAlertConditionNrqlGetArgs>? Nrql { get; set; }

        /// <summary>
        /// Whether overlapping groups should produce a violation.
        /// </summary>
        [Input("openViolationOnGroupOverlap")]
        public Input<bool>? OpenViolationOnGroupOverlap { get; set; }

        /// <summary>
        /// The ID of the policy where this condition should be used.
        /// </summary>
        [Input("policyId")]
        public Input<int>? PolicyId { get; set; }

        /// <summary>
        /// Runbook URL to display in notifications.
        /// </summary>
        [Input("runbookUrl")]
        public Input<string>? RunbookUrl { get; set; }

        [Input("terms")]
        private InputList<Inputs.NrqlAlertConditionTermGetArgs>? _terms;

        /// <summary>
        /// A set of terms for this condition. Max 2 terms allowed - at least one 1 critical term and 1 optional warning term.
        /// </summary>
        [Obsolete(@"use `critical` and `warning` attributes instead")]
        public InputList<Inputs.NrqlAlertConditionTermGetArgs> Terms
        {
            get => _terms ?? (_terms = new InputList<Inputs.NrqlAlertConditionTermGetArgs>());
            set => _terms = value;
        }

        /// <summary>
        /// The type of NRQL alert condition to create. Valid values are: 'static', 'outlier', 'baseline'.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Valid values are: 'single_value' or 'sum'
        /// </summary>
        [Input("valueFunction")]
        public Input<string>? ValueFunction { get; set; }

        /// <summary>
        /// Sets a time limit, in hours, that will automatically force-close a long-lasting violation after the time limit you
        /// select. Possible values are 'ONE_HOUR', 'TWO_HOURS', 'FOUR_HOURS', 'EIGHT_HOURS', 'TWELVE_HOURS', 'TWENTY_FOUR_HOURS'
        /// (case insensitive).
        /// </summary>
        [Input("violationTimeLimit")]
        public Input<string>? ViolationTimeLimit { get; set; }

        /// <summary>
        /// Sets a time limit, in seconds, that will automatically force-close a long-lasting violation after the time limit you
        /// select. Possible values are 3600, 7200, 14400, 28800, 43200, and 86400.
        /// </summary>
        [Input("violationTimeLimitSeconds")]
        public Input<int>? ViolationTimeLimitSeconds { get; set; }

        /// <summary>
        /// A condition term with priority set to warning.
        /// </summary>
        [Input("warning")]
        public Input<Inputs.NrqlAlertConditionWarningGetArgs>? Warning { get; set; }

        public NrqlAlertConditionState()
        {
        }
    }
}
